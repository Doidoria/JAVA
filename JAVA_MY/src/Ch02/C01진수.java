package Ch02;

public class C01진수 {

	public static void main(String[] args) {
//		10진수			2진수
//		0			   0
//		1			   1
//		2			  10
//		3			  11
//		4			 100
//		5			 101
//		6			 110
//		7			 111
//		8			1000
//		9			1001
//		------------------------------
//		1bit : 2^1 = 2(0~1)
//		2bit : 2^2 = 4(0~3)
//		3bit : 2^3 = 8(0~7)
//		4bit : 2^4 = 16(0~15)
//		5bit : 2^5 = 32(0~31)
//		6bit : 2^6 = 64(0~63)
//		7bit : 2^7 = 128(0~127)
//		8bit : 2^8 = 256(0~255)
//		9bit : 2^9 = 512(0~511)
//		10bit: 2^10 =1024(0~1023)
//		--------------------------------
//		1	1	1	1	1	1	1	1
//		*	*	*	*	*	*	*	*
//		2^7	2^6	2^5	2^4	2^3	2^2	2^1	2^0
//
//		128	64	32	16	8	4	2	1

		// 2진수 - > 10진수
		// 10101100 = 128 + 32 + 8 + 4
		// 10011010 = 128 + 16 + 8 + 2
		// 01101001 = 64 + 32 + 8 + 1
		// 10010010 = 128 + 16 + 2

		// 10진수 -> 2진수
		// 192 -> 11000000
		// 224 -> 11100000
		// 252 -> 11111100
		// 12 -> 00001100
		// 15 -> 00001111

		// %d : 10진수 서식문자
		// %o : 8진수 서식문자
		// %x : 16진수 서식문자
		// 코드 이쁘게 정리하기 : ctrl + shift + f
		System.out.printf("10진수 : %d\n", 0b10101101); //2진수 (0b:2진수를 의미하는 접두사)
		System.out.printf("10진수 : %d\n", 173); // 10진수
		System.out.printf("10진수 : %d\n", 0255); // 8진수 (0 :8진수를 의미하는 접두사)
		System.out.printf("10진수 : %d\n", 0xAD); // 16진수(0x:16진수를 의미하는 접두사)

		System.out.printf("8진수 : %o\n", 173); // 10진수
		System.out.printf("8진수 : %o\n", 0255); // 8진수 (0 :8진수를 의미하는 접두사)
		System.out.printf("8진수 : %o\n", 0xAD); // 16진수(0x:16진수를 의미하는 접두사)

		System.out.printf("16진수 : %x\n", 173); // 10진수
		System.out.printf("16진수 : %x\n", 0255); // 8진수 (0 :8진수를 의미하는 접두사)
		System.out.printf("16진수 : %x\n", 0xAD); // 16진수(0x:16진수를 의미하는 접두사)
		
		/*
		 * 컴퓨터(CPU)는 구조상 덧셈연산를 할 수 있다(o) 
		 * 컴퓨터(CPU)는 구조상 뺄셈연산를 할 수 있다(x) 
		 * 컴퓨터(CPU)에서 뺄셈요청시 뺄셈처리는 할 수 있다(o) - 보수개념을 도입해서 뺄셈처리를 수행하기 때문에 가능
		 * 
		 * 7 - 4 = 3
		 * 7 + 6 = 3
		 * 77 - 32 = 45 77 + 68 = 45
		 * 5 - 5 = 0
		 * 00000101 = 5 
		 * 11111010 = -6(1의 보수) + 00000001 = + 11111011 = -5(2의 보수)
		 * --------------- 
		 * 00000000 = 0
		 * 
		 * ------------ 00000000 = 0 00000001 = 1 00000010 = 2 00000011 = 3 .. 01111111
		 * = 127 10000000 = -128 10000001 = -128+1 10000010 = -128+2 10000011 = -128+3
		 * .. 11111111 = -128+127 = -1 00000001 = 1
		 * 
		 * 
		 * //문제 //음수값임을 고려하여 풉니다 //10 진수 -> 2진수 //111 -> 01101111 //-111 -> 10010001
		 * //96 -> 01100000 //-96 -> 10100000 //31 -> 00011111 //-31 -> 11100001
		 * 
		 * //2진수 -> 10진수 //10101111 -> -128 + 32 + 8 + 4 + 2 + 1 //00110101 -> 32 + 16 +
		 * 4 + 1 //11001100 -> -128 + 64 + 8 + 4 //10101010 -> -128 + 32 + 8 + 2
		 * 
		 */
		
		// 문제풀기
		//	111		-> 01101111
		//	-111    -> 10010001
		//	96		-> 01100000
		//	-96		-> 10100000
		//	31 		-> 00011111
		//	-31		-> 11100001
		//			
		//	2진수 
		//	10101111 -> 128+32+8+4+2+1
		//	00110101 -> 32+16+4+1
		//	11001100 -> 128+64+8+4
		//	10101010 -> 128+32+8+2
	}

}
